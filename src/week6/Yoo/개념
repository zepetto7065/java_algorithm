동적계획법 -> 큰 문제를 작은 문제로 나누어 푸는 문제

- 프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법
- 특정문제가 조건이 맞을 때만
1. 최적 부분 구조 : 큰 문제를 작은 문제로 나눌 수 있는가?
2. 중복되는 문제 : 동일한 문제가 반복적으로 호출되는가?

# 대표적 문제
- 피보나치 수열 : 1,1,2,3,5,8,13,21...
특정번째의 수열을 구할때 An = An-1 + An-2 , A1 = 1 , A2 = 1 ( 점화식 이용 가능 )

재귀함수로 해결하면 지수 시간 복잡도를 가진다.(비효율적) , 중복되는 문제가 반복적으로 호출되고 있어
이미 해결한 문제에 대한 정답을 따로 정리 및 저장 해야함. ( 메모이제이션 or 캐싱 )

탑다운 -> 하향식 -> 재귀 + 메모이제이션 ( stack overflow 발생 가능. )
보텀업 -> 상향식 -> 반복문으로 작은 문제부터 큰 문제로 차근 차근히 + 메모이제이션

다이나믹 프로그래밍은 주로 보텀업방식이며 , 결과 저장용 리스트는 DP 테이블

메모이제이션을 쓰면 피보나치 수열의 시간복잡도는 O(N)

# 분할정복 vs 다이나믹 프로그래밍
분할 정복 : 한 번 pivot 자리가 정해지면 원소의 위치는 바뀌지 않는다., 분할 이후 피벗을 다시 처리하도록
문제를 호출하지는 않는다.

# 문제 접근
 다이나믹 프로그래밍 유형인가? -> 그리디 , 구현, 완전 탐색 인가? 떠오르지 않는다면 DP 의심 ,
재귀함수 로 비효율적 완전탐색 작성뒤 메모이제이션을 넣어 개선이 가능하다.
